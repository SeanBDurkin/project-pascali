= literal integers =
{{{
literal base 10 integer = [s , "-"] , digit , {digit};
literal base 16 integer = [s , "-"] , "$" , hex , {hex};
literal base X integer = [s , "-"] , "$$" , digit , [digit] , "/" , alphanumeric , {alphanumeric};
(* The two digits in the above specify the base which may range from 2..36 . *)
literal integer = literal base 10 integer | literal base 16 integer | literal base X integer;
(* Literal integers may not exceed the range -2^127 .. (2^128)-1 *)
}}}

== Examples ==
Here are two literal integers
{{{
-00568989
$AF
}}}

= floats =
{{{
normal literal float = literal base 10 integer , [ "." , digit , {digit}] ,
              [("e"|"E") , ["-"] , digit , {digit}];
NaN = "NaN";
INF = "INF";
negative INF = s , "-INF";
literal float = normal literal float | NaN | INF | negative INF;
}}}


= binary coded decimal values =
{{{
literal bcd = literal base 10 integer , [ "." , digit , {digit}];
}}}

= boolean =
{{{
literal False = "False";
literal True = "True";
literal boolean = literal False | literal True;
}}}

= literal characters =
{{{
eoln = ? end-of-line mark or new-line characater. ?;
literal simple char = "'" , (char - (eoln | "'")) , "'";
literal apos char = "''''";
literal utf-8 char = "#" , hex , hex;
literal utf-16 char = "#" , hex , hex , hex , hex;
literal special char = "#CR" | "#LF" | "#TAB" | "#SP" | #NULL;
literal char = literal simple char | literal apos char | literal utf-8 char | literal utf-16 char | literal special char;
}}}

= strings =
{{{
literal non-localised string line = "'" , {(char - (eoln | "'")) | "''"} , "'";
literal non-localised heredoc = short identifier , eoln , {char} , short identifier , eoln;
literal long non-localised string = literal non-localised string line | literal non-localised heredoc;
literal non-localised string = { char , long non-localised string };
string = non-localised string , [">" , short identifier]; 
}}}